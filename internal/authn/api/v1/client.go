// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CheckCredentialForAuthentication request with any body
	CheckCredentialForAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckCredentialForAuthentication(ctx context.Context, body CheckCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GenerateCredentialForAuthentication request with any body
	GenerateCredentialForAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GenerateCredentialForAuthentication(ctx context.Context, body GenerateCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentifierId request with any body
	GetIdentifierIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetIdentifierId(ctx context.Context, body GetIdentifierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestIdentifierVerifyToken request with any body
	RequestIdentifierVerifyTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestIdentifierVerifyToken(ctx context.Context, body RequestIdentifierVerifyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdentifier request with any body
	DeleteIdentifierWithBody(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIdentifier(ctx context.Context, identifierId string, body DeleteIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentifier request
	GetIdentifier(ctx context.Context, identifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeIdentifier request with any body
	ChangeIdentifierWithBody(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeIdentifier(ctx context.Context, identifierId string, body ChangeIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIdentity request with any body
	CreateIdentityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIdentity(ctx context.Context, body CreateIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdentity request with any body
	DeleteIdentityWithBody(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteIdentity(ctx context.Context, identityId IdentityId, body DeleteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentity request
	GetIdentity(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCredentialsOfIdentity request
	GetAllCredentialsOfIdentity(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCredentialOfIdentity request with any body
	DeleteCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body DeleteCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCredentialOfIdentity request with any body
	UpdateCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UpdateCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnbindIdentifierToCredentialOfIdentity request with any body
	UnbindIdentifierToCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UnbindIdentifierToCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UnbindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BindIdentifierToCredentialOfIdentity request with any body
	BindIdentifierToCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BindIdentifierToCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body BindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllIdentifiersOfIdentity request
	GetAllIdentifiersOfIdentity(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIdentityIdentifer request with any body
	CreateIdentityIdentiferWithBody(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIdentityIdentifer(ctx context.Context, identityId IdentityId, body CreateIdentityIdentiferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentityState request
	GetIdentityState(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIdentityState request with any body
	UpdateIdentityStateWithBody(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIdentityState(ctx context.Context, identityId IdentityId, body UpdateIdentityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CheckCredentialForAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckCredentialForAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckCredentialForAuthentication(ctx context.Context, body CheckCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckCredentialForAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateCredentialForAuthenticationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateCredentialForAuthenticationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateCredentialForAuthentication(ctx context.Context, body GenerateCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGenerateCredentialForAuthenticationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentifierIdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentifierIdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentifierId(ctx context.Context, body GetIdentifierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentifierIdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestIdentifierVerifyTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestIdentifierVerifyTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestIdentifierVerifyToken(ctx context.Context, body RequestIdentifierVerifyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestIdentifierVerifyTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentifierWithBody(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentifierRequestWithBody(c.Server, identifierId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentifier(ctx context.Context, identifierId string, body DeleteIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentifierRequest(c.Server, identifierId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentifier(ctx context.Context, identifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentifierRequest(c.Server, identifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeIdentifierWithBody(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeIdentifierRequestWithBody(c.Server, identifierId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeIdentifier(ctx context.Context, identifierId string, body ChangeIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeIdentifierRequest(c.Server, identifierId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentity(ctx context.Context, body CreateIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentityWithBody(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentityRequestWithBody(c.Server, identityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentity(ctx context.Context, identityId IdentityId, body DeleteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentityRequest(c.Server, identityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentity(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityRequest(c.Server, identityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCredentialsOfIdentity(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCredentialsOfIdentityRequest(c.Server, identityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCredentialOfIdentityRequestWithBody(c.Server, identityId, credentialType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body DeleteCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCredentialOfIdentityRequest(c.Server, identityId, credentialType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCredentialOfIdentityRequestWithBody(c.Server, identityId, credentialType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UpdateCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCredentialOfIdentityRequest(c.Server, identityId, credentialType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnbindIdentifierToCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnbindIdentifierToCredentialOfIdentityRequestWithBody(c.Server, identityId, credentialType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnbindIdentifierToCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UnbindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnbindIdentifierToCredentialOfIdentityRequest(c.Server, identityId, credentialType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BindIdentifierToCredentialOfIdentityWithBody(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBindIdentifierToCredentialOfIdentityRequestWithBody(c.Server, identityId, credentialType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BindIdentifierToCredentialOfIdentity(ctx context.Context, identityId IdentityId, credentialType CredentialType, body BindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBindIdentifierToCredentialOfIdentityRequest(c.Server, identityId, credentialType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllIdentifiersOfIdentity(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllIdentifiersOfIdentityRequest(c.Server, identityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentityIdentiferWithBody(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityIdentiferRequestWithBody(c.Server, identityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentityIdentifer(ctx context.Context, identityId IdentityId, body CreateIdentityIdentiferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityIdentiferRequest(c.Server, identityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentityState(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityStateRequest(c.Server, identityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIdentityStateWithBody(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIdentityStateRequestWithBody(c.Server, identityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIdentityState(ctx context.Context, identityId IdentityId, body UpdateIdentityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIdentityStateRequest(c.Server, identityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCheckCredentialForAuthenticationRequest calls the generic CheckCredentialForAuthentication builder with application/json body
func NewCheckCredentialForAuthenticationRequest(server string, body CheckCredentialForAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckCredentialForAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckCredentialForAuthenticationRequestWithBody generates requests for CheckCredentialForAuthentication with any type of body
func NewCheckCredentialForAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifiers/authentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGenerateCredentialForAuthenticationRequest calls the generic GenerateCredentialForAuthentication builder with application/json body
func NewGenerateCredentialForAuthenticationRequest(server string, body GenerateCredentialForAuthenticationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateCredentialForAuthenticationRequestWithBody(server, "application/json", bodyReader)
}

// NewGenerateCredentialForAuthenticationRequestWithBody generates requests for GenerateCredentialForAuthentication with any type of body
func NewGenerateCredentialForAuthenticationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifiers/authentication")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentifierIdRequest calls the generic GetIdentifierId builder with application/json body
func NewGetIdentifierIdRequest(server string, body GetIdentifierIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetIdentifierIdRequestWithBody(server, "application/json", bodyReader)
}

// NewGetIdentifierIdRequestWithBody generates requests for GetIdentifierId with any type of body
func NewGetIdentifierIdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifiers/id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRequestIdentifierVerifyTokenRequest calls the generic RequestIdentifierVerifyToken builder with application/json body
func NewRequestIdentifierVerifyTokenRequest(server string, body RequestIdentifierVerifyTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestIdentifierVerifyTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestIdentifierVerifyTokenRequestWithBody generates requests for RequestIdentifierVerifyToken with any type of body
func NewRequestIdentifierVerifyTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifiers/verification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdentifierRequest calls the generic DeleteIdentifier builder with application/json body
func NewDeleteIdentifierRequest(server string, identifierId string, body DeleteIdentifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIdentifierRequestWithBody(server, identifierId, "application/json", bodyReader)
}

// NewDeleteIdentifierRequestWithBody generates requests for DeleteIdentifier with any type of body
func NewDeleteIdentifierRequestWithBody(server string, identifierId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier_id", runtime.ParamLocationPath, identifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentifierRequest generates requests for GetIdentifier
func NewGetIdentifierRequest(server string, identifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier_id", runtime.ParamLocationPath, identifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeIdentifierRequest calls the generic ChangeIdentifier builder with application/json body
func NewChangeIdentifierRequest(server string, identifierId string, body ChangeIdentifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeIdentifierRequestWithBody(server, identifierId, "application/json", bodyReader)
}

// NewChangeIdentifierRequestWithBody generates requests for ChangeIdentifier with any type of body
func NewChangeIdentifierRequestWithBody(server string, identifierId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identifier_id", runtime.ParamLocationPath, identifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateIdentityRequest calls the generic CreateIdentity builder with application/json body
func NewCreateIdentityRequest(server string, body CreateIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIdentityRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateIdentityRequestWithBody generates requests for CreateIdentity with any type of body
func NewCreateIdentityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdentityRequest calls the generic DeleteIdentity builder with application/json body
func NewDeleteIdentityRequest(server string, identityId IdentityId, body DeleteIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteIdentityRequestWithBody(server, identityId, "application/json", bodyReader)
}

// NewDeleteIdentityRequestWithBody generates requests for DeleteIdentity with any type of body
func NewDeleteIdentityRequestWithBody(server string, identityId IdentityId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentityRequest generates requests for GetIdentity
func NewGetIdentityRequest(server string, identityId IdentityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllCredentialsOfIdentityRequest generates requests for GetAllCredentialsOfIdentity
func NewGetAllCredentialsOfIdentityRequest(server string, identityId IdentityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/credentials", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCredentialOfIdentityRequest calls the generic DeleteCredentialOfIdentity builder with application/json body
func NewDeleteCredentialOfIdentityRequest(server string, identityId IdentityId, credentialType CredentialType, body DeleteCredentialOfIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCredentialOfIdentityRequestWithBody(server, identityId, credentialType, "application/json", bodyReader)
}

// NewDeleteCredentialOfIdentityRequestWithBody generates requests for DeleteCredentialOfIdentity with any type of body
func NewDeleteCredentialOfIdentityRequestWithBody(server string, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, credentialType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/credentials/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCredentialOfIdentityRequest calls the generic UpdateCredentialOfIdentity builder with application/json body
func NewUpdateCredentialOfIdentityRequest(server string, identityId IdentityId, credentialType CredentialType, body UpdateCredentialOfIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCredentialOfIdentityRequestWithBody(server, identityId, credentialType, "application/json", bodyReader)
}

// NewUpdateCredentialOfIdentityRequestWithBody generates requests for UpdateCredentialOfIdentity with any type of body
func NewUpdateCredentialOfIdentityRequestWithBody(server string, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, credentialType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/credentials/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnbindIdentifierToCredentialOfIdentityRequest calls the generic UnbindIdentifierToCredentialOfIdentity builder with application/json body
func NewUnbindIdentifierToCredentialOfIdentityRequest(server string, identityId IdentityId, credentialType CredentialType, body UnbindIdentifierToCredentialOfIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnbindIdentifierToCredentialOfIdentityRequestWithBody(server, identityId, credentialType, "application/json", bodyReader)
}

// NewUnbindIdentifierToCredentialOfIdentityRequestWithBody generates requests for UnbindIdentifierToCredentialOfIdentity with any type of body
func NewUnbindIdentifierToCredentialOfIdentityRequestWithBody(server string, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, credentialType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/credentials/%s/identifiers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBindIdentifierToCredentialOfIdentityRequest calls the generic BindIdentifierToCredentialOfIdentity builder with application/json body
func NewBindIdentifierToCredentialOfIdentityRequest(server string, identityId IdentityId, credentialType CredentialType, body BindIdentifierToCredentialOfIdentityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBindIdentifierToCredentialOfIdentityRequestWithBody(server, identityId, credentialType, "application/json", bodyReader)
}

// NewBindIdentifierToCredentialOfIdentityRequestWithBody generates requests for BindIdentifierToCredentialOfIdentity with any type of body
func NewBindIdentifierToCredentialOfIdentityRequestWithBody(server string, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, credentialType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/credentials/%s/identifiers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllIdentifiersOfIdentityRequest generates requests for GetAllIdentifiersOfIdentity
func NewGetAllIdentifiersOfIdentityRequest(server string, identityId IdentityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/identifiers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIdentityIdentiferRequest calls the generic CreateIdentityIdentifer builder with application/json body
func NewCreateIdentityIdentiferRequest(server string, identityId IdentityId, body CreateIdentityIdentiferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIdentityIdentiferRequestWithBody(server, identityId, "application/json", bodyReader)
}

// NewCreateIdentityIdentiferRequestWithBody generates requests for CreateIdentityIdentifer with any type of body
func NewCreateIdentityIdentiferRequestWithBody(server string, identityId IdentityId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/identifiers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentityStateRequest generates requests for GetIdentityState
func NewGetIdentityStateRequest(server string, identityId IdentityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIdentityStateRequest calls the generic UpdateIdentityState builder with application/json body
func NewUpdateIdentityStateRequest(server string, identityId IdentityId, body UpdateIdentityStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIdentityStateRequestWithBody(server, identityId, "application/json", bodyReader)
}

// NewUpdateIdentityStateRequestWithBody generates requests for UpdateIdentityState with any type of body
func NewUpdateIdentityStateRequestWithBody(server string, identityId IdentityId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, identityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identities/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CheckCredentialForAuthentication request with any body
	CheckCredentialForAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckCredentialForAuthenticationResponse, error)

	CheckCredentialForAuthenticationWithResponse(ctx context.Context, body CheckCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckCredentialForAuthenticationResponse, error)

	// GenerateCredentialForAuthentication request with any body
	GenerateCredentialForAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateCredentialForAuthenticationResponse, error)

	GenerateCredentialForAuthenticationWithResponse(ctx context.Context, body GenerateCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateCredentialForAuthenticationResponse, error)

	// GetIdentifierId request with any body
	GetIdentifierIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIdentifierIdResponse, error)

	GetIdentifierIdWithResponse(ctx context.Context, body GetIdentifierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIdentifierIdResponse, error)

	// RequestIdentifierVerifyToken request with any body
	RequestIdentifierVerifyTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestIdentifierVerifyTokenResponse, error)

	RequestIdentifierVerifyTokenWithResponse(ctx context.Context, body RequestIdentifierVerifyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestIdentifierVerifyTokenResponse, error)

	// DeleteIdentifier request with any body
	DeleteIdentifierWithBodyWithResponse(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIdentifierResponse, error)

	DeleteIdentifierWithResponse(ctx context.Context, identifierId string, body DeleteIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIdentifierResponse, error)

	// GetIdentifier request
	GetIdentifierWithResponse(ctx context.Context, identifierId string, reqEditors ...RequestEditorFn) (*GetIdentifierResponse, error)

	// ChangeIdentifier request with any body
	ChangeIdentifierWithBodyWithResponse(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeIdentifierResponse, error)

	ChangeIdentifierWithResponse(ctx context.Context, identifierId string, body ChangeIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeIdentifierResponse, error)

	// CreateIdentity request with any body
	CreateIdentityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityResponse, error)

	CreateIdentityWithResponse(ctx context.Context, body CreateIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityResponse, error)

	// DeleteIdentity request with any body
	DeleteIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIdentityResponse, error)

	DeleteIdentityWithResponse(ctx context.Context, identityId IdentityId, body DeleteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIdentityResponse, error)

	// GetIdentity request
	GetIdentityWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetIdentityResponse, error)

	// GetAllCredentialsOfIdentity request
	GetAllCredentialsOfIdentityWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetAllCredentialsOfIdentityResponse, error)

	// DeleteCredentialOfIdentity request with any body
	DeleteCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCredentialOfIdentityResponse, error)

	DeleteCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body DeleteCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCredentialOfIdentityResponse, error)

	// UpdateCredentialOfIdentity request with any body
	UpdateCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCredentialOfIdentityResponse, error)

	UpdateCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UpdateCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCredentialOfIdentityResponse, error)

	// UnbindIdentifierToCredentialOfIdentity request with any body
	UnbindIdentifierToCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnbindIdentifierToCredentialOfIdentityResponse, error)

	UnbindIdentifierToCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UnbindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*UnbindIdentifierToCredentialOfIdentityResponse, error)

	// BindIdentifierToCredentialOfIdentity request with any body
	BindIdentifierToCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BindIdentifierToCredentialOfIdentityResponse, error)

	BindIdentifierToCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body BindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*BindIdentifierToCredentialOfIdentityResponse, error)

	// GetAllIdentifiersOfIdentity request
	GetAllIdentifiersOfIdentityWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetAllIdentifiersOfIdentityResponse, error)

	// CreateIdentityIdentifer request with any body
	CreateIdentityIdentiferWithBodyWithResponse(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityIdentiferResponse, error)

	CreateIdentityIdentiferWithResponse(ctx context.Context, identityId IdentityId, body CreateIdentityIdentiferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityIdentiferResponse, error)

	// GetIdentityState request
	GetIdentityStateWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetIdentityStateResponse, error)

	// UpdateIdentityState request with any body
	UpdateIdentityStateWithBodyWithResponse(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIdentityStateResponse, error)

	UpdateIdentityStateWithResponse(ctx context.Context, identityId IdentityId, body UpdateIdentityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIdentityStateResponse, error)
}

type CheckCredentialForAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			// token generated after credential check
			Token AuthenticatedToken `json:"token"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CheckCredentialForAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckCredentialForAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateCredentialForAuthenticationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GenerateCredentialForAuthenticationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateCredentialForAuthenticationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentifierIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			IdentifierId IdentifierId `json:"identifier_id"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetIdentifierIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentifierIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestIdentifierVerifyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RequestIdentifierVerifyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestIdentifierVerifyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			Identifier IdentifierCredentials `json:"identifier"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ChangeIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			Identity Identity `json:"identity"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			Identity *Identity `json:"identity,omitempty"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCredentialsOfIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			Credentials *[]CredentialIdentifiers `json:"credentials,omitempty"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllCredentialsOfIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCredentialsOfIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCredentialOfIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCredentialOfIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCredentialOfIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCredentialOfIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCredentialOfIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCredentialOfIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnbindIdentifierToCredentialOfIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UnbindIdentifierToCredentialOfIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnbindIdentifierToCredentialOfIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BindIdentifierToCredentialOfIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r BindIdentifierToCredentialOfIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BindIdentifierToCredentialOfIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllIdentifiersOfIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			Identifiers []IdentifierCredentials `json:"identifiers"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllIdentifiersOfIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllIdentifiersOfIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIdentityIdentiferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateIdentityIdentiferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIdentityIdentiferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Code string `json:"code"`
		Data struct {
			State *State `json:"state,omitempty"`
		} `json:"data"`
		Message string `json:"message"`
	}
	JSON400 *ErrorResponse
	JSON500 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetIdentityStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIdentityStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OkResponse
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateIdentityStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIdentityStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CheckCredentialForAuthenticationWithBodyWithResponse request with arbitrary body returning *CheckCredentialForAuthenticationResponse
func (c *ClientWithResponses) CheckCredentialForAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckCredentialForAuthenticationResponse, error) {
	rsp, err := c.CheckCredentialForAuthenticationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckCredentialForAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) CheckCredentialForAuthenticationWithResponse(ctx context.Context, body CheckCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckCredentialForAuthenticationResponse, error) {
	rsp, err := c.CheckCredentialForAuthentication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckCredentialForAuthenticationResponse(rsp)
}

// GenerateCredentialForAuthenticationWithBodyWithResponse request with arbitrary body returning *GenerateCredentialForAuthenticationResponse
func (c *ClientWithResponses) GenerateCredentialForAuthenticationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GenerateCredentialForAuthenticationResponse, error) {
	rsp, err := c.GenerateCredentialForAuthenticationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateCredentialForAuthenticationResponse(rsp)
}

func (c *ClientWithResponses) GenerateCredentialForAuthenticationWithResponse(ctx context.Context, body GenerateCredentialForAuthenticationJSONRequestBody, reqEditors ...RequestEditorFn) (*GenerateCredentialForAuthenticationResponse, error) {
	rsp, err := c.GenerateCredentialForAuthentication(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGenerateCredentialForAuthenticationResponse(rsp)
}

// GetIdentifierIdWithBodyWithResponse request with arbitrary body returning *GetIdentifierIdResponse
func (c *ClientWithResponses) GetIdentifierIdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetIdentifierIdResponse, error) {
	rsp, err := c.GetIdentifierIdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentifierIdResponse(rsp)
}

func (c *ClientWithResponses) GetIdentifierIdWithResponse(ctx context.Context, body GetIdentifierIdJSONRequestBody, reqEditors ...RequestEditorFn) (*GetIdentifierIdResponse, error) {
	rsp, err := c.GetIdentifierId(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentifierIdResponse(rsp)
}

// RequestIdentifierVerifyTokenWithBodyWithResponse request with arbitrary body returning *RequestIdentifierVerifyTokenResponse
func (c *ClientWithResponses) RequestIdentifierVerifyTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestIdentifierVerifyTokenResponse, error) {
	rsp, err := c.RequestIdentifierVerifyTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestIdentifierVerifyTokenResponse(rsp)
}

func (c *ClientWithResponses) RequestIdentifierVerifyTokenWithResponse(ctx context.Context, body RequestIdentifierVerifyTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestIdentifierVerifyTokenResponse, error) {
	rsp, err := c.RequestIdentifierVerifyToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestIdentifierVerifyTokenResponse(rsp)
}

// DeleteIdentifierWithBodyWithResponse request with arbitrary body returning *DeleteIdentifierResponse
func (c *ClientWithResponses) DeleteIdentifierWithBodyWithResponse(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIdentifierResponse, error) {
	rsp, err := c.DeleteIdentifierWithBody(ctx, identifierId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentifierResponse(rsp)
}

func (c *ClientWithResponses) DeleteIdentifierWithResponse(ctx context.Context, identifierId string, body DeleteIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIdentifierResponse, error) {
	rsp, err := c.DeleteIdentifier(ctx, identifierId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentifierResponse(rsp)
}

// GetIdentifierWithResponse request returning *GetIdentifierResponse
func (c *ClientWithResponses) GetIdentifierWithResponse(ctx context.Context, identifierId string, reqEditors ...RequestEditorFn) (*GetIdentifierResponse, error) {
	rsp, err := c.GetIdentifier(ctx, identifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentifierResponse(rsp)
}

// ChangeIdentifierWithBodyWithResponse request with arbitrary body returning *ChangeIdentifierResponse
func (c *ClientWithResponses) ChangeIdentifierWithBodyWithResponse(ctx context.Context, identifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeIdentifierResponse, error) {
	rsp, err := c.ChangeIdentifierWithBody(ctx, identifierId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeIdentifierResponse(rsp)
}

func (c *ClientWithResponses) ChangeIdentifierWithResponse(ctx context.Context, identifierId string, body ChangeIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeIdentifierResponse, error) {
	rsp, err := c.ChangeIdentifier(ctx, identifierId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeIdentifierResponse(rsp)
}

// CreateIdentityWithBodyWithResponse request with arbitrary body returning *CreateIdentityResponse
func (c *ClientWithResponses) CreateIdentityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityResponse, error) {
	rsp, err := c.CreateIdentityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityResponse(rsp)
}

func (c *ClientWithResponses) CreateIdentityWithResponse(ctx context.Context, body CreateIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityResponse, error) {
	rsp, err := c.CreateIdentity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityResponse(rsp)
}

// DeleteIdentityWithBodyWithResponse request with arbitrary body returning *DeleteIdentityResponse
func (c *ClientWithResponses) DeleteIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteIdentityResponse, error) {
	rsp, err := c.DeleteIdentityWithBody(ctx, identityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentityResponse(rsp)
}

func (c *ClientWithResponses) DeleteIdentityWithResponse(ctx context.Context, identityId IdentityId, body DeleteIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteIdentityResponse, error) {
	rsp, err := c.DeleteIdentity(ctx, identityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentityResponse(rsp)
}

// GetIdentityWithResponse request returning *GetIdentityResponse
func (c *ClientWithResponses) GetIdentityWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetIdentityResponse, error) {
	rsp, err := c.GetIdentity(ctx, identityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityResponse(rsp)
}

// GetAllCredentialsOfIdentityWithResponse request returning *GetAllCredentialsOfIdentityResponse
func (c *ClientWithResponses) GetAllCredentialsOfIdentityWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetAllCredentialsOfIdentityResponse, error) {
	rsp, err := c.GetAllCredentialsOfIdentity(ctx, identityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCredentialsOfIdentityResponse(rsp)
}

// DeleteCredentialOfIdentityWithBodyWithResponse request with arbitrary body returning *DeleteCredentialOfIdentityResponse
func (c *ClientWithResponses) DeleteCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCredentialOfIdentityResponse, error) {
	rsp, err := c.DeleteCredentialOfIdentityWithBody(ctx, identityId, credentialType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCredentialOfIdentityResponse(rsp)
}

func (c *ClientWithResponses) DeleteCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body DeleteCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCredentialOfIdentityResponse, error) {
	rsp, err := c.DeleteCredentialOfIdentity(ctx, identityId, credentialType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCredentialOfIdentityResponse(rsp)
}

// UpdateCredentialOfIdentityWithBodyWithResponse request with arbitrary body returning *UpdateCredentialOfIdentityResponse
func (c *ClientWithResponses) UpdateCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCredentialOfIdentityResponse, error) {
	rsp, err := c.UpdateCredentialOfIdentityWithBody(ctx, identityId, credentialType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCredentialOfIdentityResponse(rsp)
}

func (c *ClientWithResponses) UpdateCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UpdateCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCredentialOfIdentityResponse, error) {
	rsp, err := c.UpdateCredentialOfIdentity(ctx, identityId, credentialType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCredentialOfIdentityResponse(rsp)
}

// UnbindIdentifierToCredentialOfIdentityWithBodyWithResponse request with arbitrary body returning *UnbindIdentifierToCredentialOfIdentityResponse
func (c *ClientWithResponses) UnbindIdentifierToCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UnbindIdentifierToCredentialOfIdentityResponse, error) {
	rsp, err := c.UnbindIdentifierToCredentialOfIdentityWithBody(ctx, identityId, credentialType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnbindIdentifierToCredentialOfIdentityResponse(rsp)
}

func (c *ClientWithResponses) UnbindIdentifierToCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body UnbindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*UnbindIdentifierToCredentialOfIdentityResponse, error) {
	rsp, err := c.UnbindIdentifierToCredentialOfIdentity(ctx, identityId, credentialType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnbindIdentifierToCredentialOfIdentityResponse(rsp)
}

// BindIdentifierToCredentialOfIdentityWithBodyWithResponse request with arbitrary body returning *BindIdentifierToCredentialOfIdentityResponse
func (c *ClientWithResponses) BindIdentifierToCredentialOfIdentityWithBodyWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BindIdentifierToCredentialOfIdentityResponse, error) {
	rsp, err := c.BindIdentifierToCredentialOfIdentityWithBody(ctx, identityId, credentialType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBindIdentifierToCredentialOfIdentityResponse(rsp)
}

func (c *ClientWithResponses) BindIdentifierToCredentialOfIdentityWithResponse(ctx context.Context, identityId IdentityId, credentialType CredentialType, body BindIdentifierToCredentialOfIdentityJSONRequestBody, reqEditors ...RequestEditorFn) (*BindIdentifierToCredentialOfIdentityResponse, error) {
	rsp, err := c.BindIdentifierToCredentialOfIdentity(ctx, identityId, credentialType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBindIdentifierToCredentialOfIdentityResponse(rsp)
}

// GetAllIdentifiersOfIdentityWithResponse request returning *GetAllIdentifiersOfIdentityResponse
func (c *ClientWithResponses) GetAllIdentifiersOfIdentityWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetAllIdentifiersOfIdentityResponse, error) {
	rsp, err := c.GetAllIdentifiersOfIdentity(ctx, identityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllIdentifiersOfIdentityResponse(rsp)
}

// CreateIdentityIdentiferWithBodyWithResponse request with arbitrary body returning *CreateIdentityIdentiferResponse
func (c *ClientWithResponses) CreateIdentityIdentiferWithBodyWithResponse(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityIdentiferResponse, error) {
	rsp, err := c.CreateIdentityIdentiferWithBody(ctx, identityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityIdentiferResponse(rsp)
}

func (c *ClientWithResponses) CreateIdentityIdentiferWithResponse(ctx context.Context, identityId IdentityId, body CreateIdentityIdentiferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityIdentiferResponse, error) {
	rsp, err := c.CreateIdentityIdentifer(ctx, identityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityIdentiferResponse(rsp)
}

// GetIdentityStateWithResponse request returning *GetIdentityStateResponse
func (c *ClientWithResponses) GetIdentityStateWithResponse(ctx context.Context, identityId IdentityId, reqEditors ...RequestEditorFn) (*GetIdentityStateResponse, error) {
	rsp, err := c.GetIdentityState(ctx, identityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityStateResponse(rsp)
}

// UpdateIdentityStateWithBodyWithResponse request with arbitrary body returning *UpdateIdentityStateResponse
func (c *ClientWithResponses) UpdateIdentityStateWithBodyWithResponse(ctx context.Context, identityId IdentityId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIdentityStateResponse, error) {
	rsp, err := c.UpdateIdentityStateWithBody(ctx, identityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIdentityStateResponse(rsp)
}

func (c *ClientWithResponses) UpdateIdentityStateWithResponse(ctx context.Context, identityId IdentityId, body UpdateIdentityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIdentityStateResponse, error) {
	rsp, err := c.UpdateIdentityState(ctx, identityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIdentityStateResponse(rsp)
}

// ParseCheckCredentialForAuthenticationResponse parses an HTTP response from a CheckCredentialForAuthenticationWithResponse call
func ParseCheckCredentialForAuthenticationResponse(rsp *http.Response) (*CheckCredentialForAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckCredentialForAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				// token generated after credential check
				Token AuthenticatedToken `json:"token"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGenerateCredentialForAuthenticationResponse parses an HTTP response from a GenerateCredentialForAuthenticationWithResponse call
func ParseGenerateCredentialForAuthenticationResponse(rsp *http.Response) (*GenerateCredentialForAuthenticationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GenerateCredentialForAuthenticationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIdentifierIdResponse parses an HTTP response from a GetIdentifierIdWithResponse call
func ParseGetIdentifierIdResponse(rsp *http.Response) (*GetIdentifierIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentifierIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				IdentifierId IdentifierId `json:"identifier_id"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRequestIdentifierVerifyTokenResponse parses an HTTP response from a RequestIdentifierVerifyTokenWithResponse call
func ParseRequestIdentifierVerifyTokenResponse(rsp *http.Response) (*RequestIdentifierVerifyTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestIdentifierVerifyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteIdentifierResponse parses an HTTP response from a DeleteIdentifierWithResponse call
func ParseDeleteIdentifierResponse(rsp *http.Response) (*DeleteIdentifierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIdentifierResponse parses an HTTP response from a GetIdentifierWithResponse call
func ParseGetIdentifierResponse(rsp *http.Response) (*GetIdentifierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				Identifier IdentifierCredentials `json:"identifier"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseChangeIdentifierResponse parses an HTTP response from a ChangeIdentifierWithResponse call
func ParseChangeIdentifierResponse(rsp *http.Response) (*ChangeIdentifierResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateIdentityResponse parses an HTTP response from a CreateIdentityWithResponse call
func ParseCreateIdentityResponse(rsp *http.Response) (*CreateIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				Identity Identity `json:"identity"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteIdentityResponse parses an HTTP response from a DeleteIdentityWithResponse call
func ParseDeleteIdentityResponse(rsp *http.Response) (*DeleteIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIdentityResponse parses an HTTP response from a GetIdentityWithResponse call
func ParseGetIdentityResponse(rsp *http.Response) (*GetIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				Identity *Identity `json:"identity,omitempty"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllCredentialsOfIdentityResponse parses an HTTP response from a GetAllCredentialsOfIdentityWithResponse call
func ParseGetAllCredentialsOfIdentityResponse(rsp *http.Response) (*GetAllCredentialsOfIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCredentialsOfIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				Credentials *[]CredentialIdentifiers `json:"credentials,omitempty"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCredentialOfIdentityResponse parses an HTTP response from a DeleteCredentialOfIdentityWithResponse call
func ParseDeleteCredentialOfIdentityResponse(rsp *http.Response) (*DeleteCredentialOfIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCredentialOfIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCredentialOfIdentityResponse parses an HTTP response from a UpdateCredentialOfIdentityWithResponse call
func ParseUpdateCredentialOfIdentityResponse(rsp *http.Response) (*UpdateCredentialOfIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCredentialOfIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUnbindIdentifierToCredentialOfIdentityResponse parses an HTTP response from a UnbindIdentifierToCredentialOfIdentityWithResponse call
func ParseUnbindIdentifierToCredentialOfIdentityResponse(rsp *http.Response) (*UnbindIdentifierToCredentialOfIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnbindIdentifierToCredentialOfIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBindIdentifierToCredentialOfIdentityResponse parses an HTTP response from a BindIdentifierToCredentialOfIdentityWithResponse call
func ParseBindIdentifierToCredentialOfIdentityResponse(rsp *http.Response) (*BindIdentifierToCredentialOfIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BindIdentifierToCredentialOfIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAllIdentifiersOfIdentityResponse parses an HTTP response from a GetAllIdentifiersOfIdentityWithResponse call
func ParseGetAllIdentifiersOfIdentityResponse(rsp *http.Response) (*GetAllIdentifiersOfIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllIdentifiersOfIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				Identifiers []IdentifierCredentials `json:"identifiers"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateIdentityIdentiferResponse parses an HTTP response from a CreateIdentityIdentiferWithResponse call
func ParseCreateIdentityIdentiferResponse(rsp *http.Response) (*CreateIdentityIdentiferResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIdentityIdentiferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetIdentityStateResponse parses an HTTP response from a GetIdentityStateWithResponse call
func ParseGetIdentityStateResponse(rsp *http.Response) (*GetIdentityStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Code string `json:"code"`
			Data struct {
				State *State `json:"state,omitempty"`
			} `json:"data"`
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateIdentityStateResponse parses an HTTP response from a UpdateIdentityStateWithResponse call
func ParseUpdateIdentityStateResponse(rsp *http.Response) (*UpdateIdentityStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIdentityStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
