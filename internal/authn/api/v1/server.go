// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package apiv1

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /identifiers/authentication)
	CheckCredentialForAuthentication(ctx echo.Context) error

	// (PUT /identifiers/authentication)
	GenerateCredentialForAuthentication(ctx echo.Context) error
	// Your GET endpoint
	// (GET /identifiers/id)
	GetIdentifierId(ctx echo.Context) error

	// (PUT /identifiers/verification)
	RequestIdentifierVerifyToken(ctx echo.Context) error

	// (DELETE /identifiers/{identifier_id})
	DeleteIdentifier(ctx echo.Context, identifierId string) error
	// Your GET endpoint
	// (GET /identifiers/{identifier_id})
	GetIdentifier(ctx echo.Context, identifierId string) error

	// (PATCH /identifiers/{identifier_id})
	ChangeIdentifier(ctx echo.Context, identifierId string) error

	// (POST /identities)
	CreateIdentity(ctx echo.Context) error

	// (DELETE /identities/{identity_id})
	DeleteIdentity(ctx echo.Context, identityId IdentityId) error
	// Your GET endpoint
	// (GET /identities/{identity_id})
	GetIdentity(ctx echo.Context, identityId IdentityId) error

	// (GET /identities/{identity_id}/credentials)
	GetAllCredentialsOfIdentity(ctx echo.Context, identityId IdentityId) error

	// (DELETE /identities/{identity_id}/credentials/{credential_type})
	DeleteCredentialOfIdentity(ctx echo.Context, identityId IdentityId, credentialType CredentialType) error

	// (PATCH /identities/{identity_id}/credentials/{credential_type})
	UpdateCredentialOfIdentity(ctx echo.Context, identityId IdentityId, credentialType CredentialType) error

	// (DELETE /identities/{identity_id}/credentials/{credential_type}/identifiers)
	UnbindIdentifierToCredentialOfIdentity(ctx echo.Context, identityId IdentityId, credentialType CredentialType) error

	// (PUT /identities/{identity_id}/credentials/{credential_type}/identifiers)
	BindIdentifierToCredentialOfIdentity(ctx echo.Context, identityId IdentityId, credentialType CredentialType) error

	// (GET /identities/{identity_id}/identifiers)
	GetAllIdentifiersOfIdentity(ctx echo.Context, identityId IdentityId) error

	// (PUT /identities/{identity_id}/identifiers)
	CreateIdentityIdentifer(ctx echo.Context, identityId IdentityId) error
	// Your GET endpoint
	// (GET /identities/{identity_id}/state)
	GetIdentityState(ctx echo.Context, identityId IdentityId) error

	// (PUT /identities/{identity_id}/state)
	UpdateIdentityState(ctx echo.Context, identityId IdentityId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CheckCredentialForAuthentication converts echo context to params.
func (w *ServerInterfaceWrapper) CheckCredentialForAuthentication(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckCredentialForAuthentication(ctx)
	return err
}

// GenerateCredentialForAuthentication converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateCredentialForAuthentication(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateCredentialForAuthentication(ctx)
	return err
}

// GetIdentifierId converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentifierId(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdentifierId(ctx)
	return err
}

// RequestIdentifierVerifyToken converts echo context to params.
func (w *ServerInterfaceWrapper) RequestIdentifierVerifyToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestIdentifierVerifyToken(ctx)
	return err
}

// DeleteIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier_id" -------------
	var identifierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier_id", runtime.ParamLocationPath, ctx.Param("identifier_id"), &identifierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdentifier(ctx, identifierId)
	return err
}

// GetIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier_id" -------------
	var identifierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier_id", runtime.ParamLocationPath, ctx.Param("identifier_id"), &identifierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdentifier(ctx, identifierId)
	return err
}

// ChangeIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier_id" -------------
	var identifierId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "identifier_id", runtime.ParamLocationPath, ctx.Param("identifier_id"), &identifierId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeIdentifier(ctx, identifierId)
	return err
}

// CreateIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIdentity(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIdentity(ctx)
	return err
}

// DeleteIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIdentity(ctx, identityId)
	return err
}

// GetIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdentity(ctx, identityId)
	return err
}

// GetAllCredentialsOfIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllCredentialsOfIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllCredentialsOfIdentity(ctx, identityId)
	return err
}

// DeleteCredentialOfIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredentialOfIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// ------------- Path parameter "credential_type" -------------
	var credentialType CredentialType

	err = runtime.BindStyledParameterWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, ctx.Param("credential_type"), &credentialType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credential_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredentialOfIdentity(ctx, identityId, credentialType)
	return err
}

// UpdateCredentialOfIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCredentialOfIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// ------------- Path parameter "credential_type" -------------
	var credentialType CredentialType

	err = runtime.BindStyledParameterWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, ctx.Param("credential_type"), &credentialType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credential_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCredentialOfIdentity(ctx, identityId, credentialType)
	return err
}

// UnbindIdentifierToCredentialOfIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) UnbindIdentifierToCredentialOfIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// ------------- Path parameter "credential_type" -------------
	var credentialType CredentialType

	err = runtime.BindStyledParameterWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, ctx.Param("credential_type"), &credentialType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credential_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnbindIdentifierToCredentialOfIdentity(ctx, identityId, credentialType)
	return err
}

// BindIdentifierToCredentialOfIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) BindIdentifierToCredentialOfIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// ------------- Path parameter "credential_type" -------------
	var credentialType CredentialType

	err = runtime.BindStyledParameterWithLocation("simple", false, "credential_type", runtime.ParamLocationPath, ctx.Param("credential_type"), &credentialType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credential_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.BindIdentifierToCredentialOfIdentity(ctx, identityId, credentialType)
	return err
}

// GetAllIdentifiersOfIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllIdentifiersOfIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllIdentifiersOfIdentity(ctx, identityId)
	return err
}

// CreateIdentityIdentifer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIdentityIdentifer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIdentityIdentifer(ctx, identityId)
	return err
}

// GetIdentityState converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentityState(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetIdentityState(ctx, identityId)
	return err
}

// UpdateIdentityState converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIdentityState(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identity_id" -------------
	var identityId IdentityId

	err = runtime.BindStyledParameterWithLocation("simple", false, "identity_id", runtime.ParamLocationPath, ctx.Param("identity_id"), &identityId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identity_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIdentityState(ctx, identityId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/identifiers/authentication", wrapper.CheckCredentialForAuthentication)
	router.PUT(baseURL+"/identifiers/authentication", wrapper.GenerateCredentialForAuthentication)
	router.GET(baseURL+"/identifiers/id", wrapper.GetIdentifierId)
	router.PUT(baseURL+"/identifiers/verification", wrapper.RequestIdentifierVerifyToken)
	router.DELETE(baseURL+"/identifiers/:identifier_id", wrapper.DeleteIdentifier)
	router.GET(baseURL+"/identifiers/:identifier_id", wrapper.GetIdentifier)
	router.PATCH(baseURL+"/identifiers/:identifier_id", wrapper.ChangeIdentifier)
	router.POST(baseURL+"/identities", wrapper.CreateIdentity)
	router.DELETE(baseURL+"/identities/:identity_id", wrapper.DeleteIdentity)
	router.GET(baseURL+"/identities/:identity_id", wrapper.GetIdentity)
	router.GET(baseURL+"/identities/:identity_id/credentials", wrapper.GetAllCredentialsOfIdentity)
	router.DELETE(baseURL+"/identities/:identity_id/credentials/:credential_type", wrapper.DeleteCredentialOfIdentity)
	router.PATCH(baseURL+"/identities/:identity_id/credentials/:credential_type", wrapper.UpdateCredentialOfIdentity)
	router.DELETE(baseURL+"/identities/:identity_id/credentials/:credential_type/identifiers", wrapper.UnbindIdentifierToCredentialOfIdentity)
	router.PUT(baseURL+"/identities/:identity_id/credentials/:credential_type/identifiers", wrapper.BindIdentifierToCredentialOfIdentity)
	router.GET(baseURL+"/identities/:identity_id/identifiers", wrapper.GetAllIdentifiersOfIdentity)
	router.PUT(baseURL+"/identities/:identity_id/identifiers", wrapper.CreateIdentityIdentifer)
	router.GET(baseURL+"/identities/:identity_id/state", wrapper.GetIdentityState)
	router.PUT(baseURL+"/identities/:identity_id/state", wrapper.UpdateIdentityState)

}
