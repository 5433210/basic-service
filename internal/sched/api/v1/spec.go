// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package apiv1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9K8K0QC9qpDTtRbekDQqnBxcL7CkIAkoc27RpUktS3ngN/fcFyUhmLMpx",
	"sMkiC+xN0YzfzLw3H8oOKrmupUBhNBQ7UKhrKTS6P66Vkso+VFIYFMY+krrmrCKGSZEttRT2na4WuCb2",
	"6VeFMyjgl2yPmnmrzhzah0d8aNs2BYq6Uqy2YFD4cInqPVKYrl4t+nR1LPR0FcRt00fMPQn9b4sd1ErW",
	"qAzzHFWSurdmWyMUoI1iYm5zp8SQwCDLJVbGGtaoNZnHftSmoPBTwxRSKG499N7/LgXDDMeOqT6ndBjj",
	"+gGrxtd2mPCMCaYXSO+JiebNaPT1Upb3IybZmLqJg2lDlBmPpZuqQq0DWyklRyIGXDAKfQ4hEX2doyT4",
	"Dj4UTczYPKqOIOsTpHFeaYczSEiqWD43shymMtomlGlScqQxclLAoLajQ9f5jSs7UnEKAh+cbDOp1lZA",
	"myv+bpgrXSGhU8G3UBjVYBrpCoHONZq+/CxQxVuiWiBteDwjC/hFihMEcv3iowSYAUJA8D7XgNdAU6tb",
	"RM5go5y+FY4OfxcwQB7EtX5MzGS3GEllNRostKUsk65slVz+P4E9vHsPKWxQae99fpY7VWoUpGZQwMVZ",
	"fpZDCjUxC1dQtpSle5ij64mn0RQaxXCDCeE8cZ4OTLlFPaFQwL9oLjm/8aYnR+aPPH/Rkn/h+mUG1/q5",
	"KbEKtz3VRCmyfV6soS4HN+U/i/GnLy8WvafBn0br/dcLvG3EWuqIHJVCYjAhVoqBEn87o+9pOzGozZWk",
	"21c7tI7L1s/jUObjlU1Xb01Zm/pWznZLWU5o68njaHBIo38/QuM/ztjR+P4KTeOTOkfjC0rKbeKX5OGc",
	"3sjyajuh33lOTxjPbx9HNzJEkTUaVBqK2x0wa7NrDrpLCK4zILwn/sTtazsMf+c2ZbUY8t3UdHwUPzrj",
	"z1H0o5hh9zE3fmj69v1NJ4F7vIsvOb8Ofd7d2dl/vf6Yx+ctJsn994Vq06E2ikMBC2PqIsu4rAhfSG2K",
	"izzPs805tHft1wAAAP//0+wl8MMOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
