// Package apiv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package apiv1

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /jobs)
	GetAllJobs(ctx echo.Context) error

	// (POST /jobs)
	CreateJob(ctx echo.Context) error

	// (DELETE /jobs/{jobId})
	DeleteJob(ctx echo.Context, jobId string) error

	// (GET /jobs/{jobId})
	GetJobById(ctx echo.Context, jobId string) error

	// (PATCH /jobs/{jobId})
	UpdateJob(ctx echo.Context, jobId string) error

	// (GET /jobs/{jobId}/executions)
	GetJobAllExecutions(ctx echo.Context, jobId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllJobs converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllJobs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllJobs(ctx)
	return err
}

// CreateJob converts echo context to params.
func (w *ServerInterfaceWrapper) CreateJob(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateJob(ctx)
	return err
}

// DeleteJob converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "jobId", runtime.ParamLocationPath, ctx.Param("jobId"), &jobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteJob(ctx, jobId)
	return err
}

// GetJobById converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "jobId", runtime.ParamLocationPath, ctx.Param("jobId"), &jobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobById(ctx, jobId)
	return err
}

// UpdateJob converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateJob(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "jobId", runtime.ParamLocationPath, ctx.Param("jobId"), &jobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateJob(ctx, jobId)
	return err
}

// GetJobAllExecutions converts echo context to params.
func (w *ServerInterfaceWrapper) GetJobAllExecutions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "jobId" -------------
	var jobId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "jobId", runtime.ParamLocationPath, ctx.Param("jobId"), &jobId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter jobId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetJobAllExecutions(ctx, jobId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/jobs", wrapper.GetAllJobs)
	router.POST(baseURL+"/jobs", wrapper.CreateJob)
	router.DELETE(baseURL+"/jobs/:jobId", wrapper.DeleteJob)
	router.GET(baseURL+"/jobs/:jobId", wrapper.GetJobById)
	router.PATCH(baseURL+"/jobs/:jobId", wrapper.UpdateJob)
	router.GET(baseURL+"/jobs/:jobId/executions", wrapper.GetJobAllExecutions)

}
